;; http://projecteuler.net/index.php?section=problems&id=2
;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; Find the sum of all the even-valued terms in the sequence which do not exceed four million.

;; http://odz.sakura.ne.jp/projecteuler/index.php?Problem%202
;; フィボナッチ数列の項は前の2つの項の和である。 最初の2項を 1, 2 とすれば、最初の10項は以下の通りである。

;;  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;; 数列の項が400万を超えない範囲で、偶数の項の総和を求めよ。

;; Note:この問題は最近更新されました。お使いのパラメータが正しいかどうか確認してください。

(use srfi-1)

(define (fib n)
  (if (or (zero? n)
          (= 1 n))
      1
      (+ (fib (- n 1))
         (fib (- n 2)))))

(map fib (iota 10 1))
;; (1 2 3 5 8 13 21 34 55 89)

(time (map fib (iota 35 1)))
;; ;(time (map fib (iota 35 1)))
;; ; real   5.500
;; ; user   5.656
;; ; sys    0.000
;; (1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352)


(define (fib n)
  (let rec ((n n)(cur 1)(next 2))
    (if (or (zero? n)
            (= 1 n))
        cur
        (rec (- n 1) next (+ cur next)))))

(time (map fib (iota 35 1)))
;; ;(time (map fib (iota 35 1)))
;; ; real   0.000
;; ; user   0.000
;; ; sys    0.000
;; (1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352)

(time (apply + (map fib (iota 4000 1))))
;; ;(time (apply + (map fib (iota 4000 1))))
;; ; real   4.063
;; ; user   3.703
;; ; sys    0.250
;; 169059242416900769854835146125700103889620372263122943269444031522877472536709551262448092383998615929815452354105157913272333647509809540334400376482537251659001448180503805247073410388029049604451002876319711594707512240251251331457067608822031929777112075937028777758917789817594843427393674452025144713294152693011358263542453082545367776690135464881122459543586684037093993960291129300021770011215111391165899312432672922480778552579344074646571089197503030645707934612193864684270466390594297098789076648513778932101019196338972549827448635659473136349016825517420314538710081782200299869004798563918724472002134031274113074475578770935854480370231899050402530858115986427691853965753778090784078208665698938446424647627629810262846148314311148504707885116243586338053494175647905264424776139447200548603728272033561594190896877875


(define fib
  (let* ((cache (make-hash-table 'eq?))
         (gethash (cut hash-table-get cache <> #f)))
    (lambda (m)
      (if-let1 r (gethash m)
               r
               (let rec ((n m)(cur 1)(next 2))
                 (if (or (zero? n)
                         (= 1 n))
                     (begin
                       (hash-table-put! cache m cur)
                       cur)
                     (rec (- n 1) next (+ cur next))))))))

(time (apply + (map fib (iota 4000 1))))
;; ;(time (apply + (map fib (iota 4000 1))))
;; ; real   3.469
;; ; user   3.282
;; ; sys    0.156
;; 169059242416900769854835146125700103889620372263122943269444031522877472536709551262448092383998615929815452354105157913272333647509809540334400376482537251659001448180503805247073410388029049604451002876319711594707512240251251331457067608822031929777112075937028777758917789817594843427393674452025144713294152693011358263542453082545367776690135464881122459543586684037093993960291129300021770011215111391165899312432672922480778552579344074646571089197503030645707934612193864684270466390594297098789076648513778932101019196338972549827448635659473136349016825517420314538710081782200299869004798563918724472002134031274113074475578770935854480370231899050402530858115986427691853965753778090784078208665698938446424647627629810262846148314311148504707885116243586338053494175647905264424776139447200548603728272033561594190896877875

(time (apply + (map fib (iota 8000 1))))
